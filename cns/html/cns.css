/* Chicken Noodle Soap Text Adventure Game Interface
 *
 * Copyright 2025 Joey Parrish
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generic styles for Chicken Noodle Soap games. */

:root {
  --font-size: 2vh;
  --default-font: 'Libre Baskerville', serif;
  --default-font-mono: 'Courier Prime', monospace;
  --default-non-game-font: 'Roboto', sans-serif;
}

* {
  box-sizing: border-box;
}

html {
  /* This is now the basis of rem units. */
  font-size: var(--font-size);
}

body {
  font-family: var(--default-font);
  margin: 0;
  padding: 0;

  /* The body is black and only occupies the screen size. */
  background: black;
  overflow: hidden;
  height: 100dvh;
  position: relative;
}

a, a:visited {
  color: inherit;
  text-decoration: underline;
}

#vorple {
  font-family: var(--default-font);

  /* The game area is white and scrolls. */
  background: white;
  overflow-y: scroll;
  scroll-behavior: smooth;

  height: 100dvh;

  /* The game area fades in and out when we go to/from splash/credits. */
  transition: opacity 2s linear;

  /* It starts hidden. */
  opacity: 0;
}

body[data-mode="play"] #vorple {
  /* In play mode, we show the game area.  This transitions over 2s.
   * To enable that transition, we use opacity instead of display. */
  opacity: 1;
}

#splash, #credits, #menus {
  /* These default to hidden. */
  display: none;

  font-family: var(--default-non-game-font);
}
body[data-mode="splash"] #splash {
  display: flex;
}
body[data-mode="credits"] #credits {
  display: block;  /* Not flex, or the centering is off */
}
body[data-mode="play"] #menus {
  /* These show when we enter play mode. */
  display: block;
}

body, #vorple {
  position: relative;
  z-index: 0;
}
#menus {
  position: relative;
  z-index: 1;
}
.popup-container {
  position: relative;
  z-index: 2;
}
#splash, #credits {
  z-index: 3;
}

/* Vorple comes with a min-height that messes up our mobile sizing. */
#vorple {
  min-height: 0;
}

body[data-auto-complete="false"] #auto-complete {
  visibility: hidden;
}

/* More responsive font size and output width */
#vorple, label, input, select, button {
  font-size: 1rem;
}
#output {
  max-width: calc(min(50em, 78vw, 100vw - 6em));

  /* Add a little extra padding on bottom so the autocomplete isn't too cramped. */
  padding-bottom: 2em;
}

#splash, #credits {
  background: transparent;
  color: white;

  position: fixed;
  top: 0;

  margin: 0;
  padding: 2vh 2vw;
  height: 100dvh;
  width: 100vw;

  overflow: hidden;
  user-select: none;
}

#splash, #creditsWrapper {
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

#splash .fade-in-fade-out {
  opacity: 0;
  animation: 9s ease-in 1s fade-in-fade-out;
  position: absolute;
  text-align: center;
}

#splash #logo img {
  min-width: 100px;
  max-width: 90vw;
  max-height: 90vh;
}

#splash #cover {
  animation-delay: 10s;
}

img.cover {
  min-width: 100px;
  max-width: 90vw;
  max-height: 78vh;
}

#splash .author {
  font-size: 1.25rem;
  margin: 1vh 0;
}

#splash .inform {
  font-size: 0.75rem;
  margin: 1vh 0;
}

@keyframes fade-in-fade-out {
  0% {
    opacity: 0;
  }
  22% {
    opacity: 1;
  }
  66% {
    opacity: 1;
  }
  88% {
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}

#creditsOuterSizer {
  /* height set at runtime to match #creditsWrapper,
   * used in calc percentage later */
}

#creditsWrapper {
  display: flex;
  animation: 90s linear 2s credits-scroll-and-fade;
  top: 100dvh;
  position: relative;

  max-width: calc(min(180vh, 90vw));
  margin: auto;

  font-size: calc(min(4rem, 10vh));
}

#creditsWrapper div {
  margin: 1em 0;
  text-align: center;
}
#creditsWrapper div:last-child {
  margin-top: 50vh;
  margin-bottom: 0;
}

.credits-copyright {
  white-space: pre;
}

.desktop-bundle-only {
  /* Re-enabled in the desktop bundle at runtime. */
  display: none;
}

@keyframes credits-scroll-and-fade {
  0% {
    top: 100dvh;
    opacity: 1;
  }
  90% {
    /* -100% would fully offscreen, +50vh+1em centers the final line. */
    top: calc(-100% + 1em + 50vh);
    opacity: 1;
  }
  92% {
    /* -100% would fully offscreen, +50vh+1em centers the final line. */
    top: calc(-100% + 1em + 50vh);
    opacity: 1;
  }
  97% {
    top: calc(-100% + 1em + 50vh);
    opacity: 0;
  }
  100% {
    top: calc(-100% + 1em + 50vh);
    opacity: 0;
  }
}

#backgroundMusic {
  display: none;
}
#noMusic {
  display: none;
}

#lineinput-field, .prompt-input {
  /* Small increase in space by the prompt.  This is cheaper than overwriting
   * the prompt on every turn, which is the only other way I found to keep the
   * prompt from reverting to stock on a "restart" command. */
  padding-left: 0.5em;
}

/* Sometimes, when a command results in lots of text, it is difficult to find
 * your last command to start reading.  This makes it stand out some.
 * Also, match the auto-complete to this. */
.lineinput,
#lineinput,
#lineinput-prefix,
#lineinput-field,
#auto-complete select {
  font-family: var(--default-font);
  color: black;
  background: #eee;
}

ul.inventory {
  /* The UA default is to have top & bottom margins, but I like the list to
   * look more compact in inventory. */
  margin: 0;
}

/* The form containing the input field and auto-complete. */
#lineinput {
  position: relative;
}

/* The auto-complete elements, positioned in an overlay over the input field. */
#auto-complete {
  position: absolute;
  display: none;
}

.continue {
  background: khaki;
  padding: 0.5em;
  border: 2px ridge grey;
  display: block;
}

.room-heading {
  background: lavender;
  font-weight: bold;
}

/* Other room names, not in the heading that describes the current room. */
:not(.room-heading) > .room-name {
  background: lavenderblush;
  font-weight: bold;
}

.direction-name {
  background: lavenderblush;
  font-weight: bold;
}

.hint {
  background: linen;
  font-style: italic;
}

.ending-card {
  /* Offsets the block from the page. */
  background: mediumspringgreen;
  border: 2px ridge grey;

  /* Makes the border stay back from the edge of the text, which is nice. */
  padding: 0.5em;

  /* Vorpal is creating a span for this, but to have the border and background
   * work the way we want, we style it as a block or inline-block.
   * Even worse, there is some bug in which trying to center the content in
   * Inform causes the generated HTML to be all screwy, with the ending-card
   * empty and the text outside it.  Ugh.
   * So, to solve all that, we use block to take up the whole line, inline-size
   * to shrink the background to the content, and margin to center it all. */
  display: block;
  inline-size: fit-content;
  margin: 0 auto;
}

/* This will be used to highlight interesting words in room descriptions in
 * easy mode. */
body[data-difficulty="easy"] .interesting-highlight,
#settings-card .interesting-highlight {
  background: paleturquoise;
}

.hidden {
  display: none !important;
}

#menus {
  font-size: 2vh;
}

.floating-button {
  font-size: 1em;
  width: 3em;
  height: 3em;
  border-radius: 50%;
  font-weight: bold;
  padding: 0;
}

.floating-button img {
  height: 2em;
  vertical-align: middle;
}

.floating-button-text {
  height: 2em;
  border-radius: 0.2em;
  font-weight: bold;
}

.floating-button,
.floating-button-text {
  /* This may matter across browsers.  In Chrome, the default is fine. */
  border: 2px solid black;

  background: powderblue;
  cursor: pointer;
}

.floating-button:active,
.floating-button-text:active {
  background: turquoise;
}

.popup-container {
  /* Position in the middle of the page, overlaying everything else. */
  position: fixed;
  width: 100vw;
  height: 100dvh;
  margin: 0;
  padding: 0;
  overflow: hidden;
  top: 0;
  left: 0;

  display: flex;
  align-items: center;
  justify-content: center;

  /* Place a scrim behind the card */
  background: radial-gradient(black, transparent);
}

.popup {
  /* Offsets the block from the page. */
  border: 2px ridge grey;

  /* Makes the border stay back from the edge of the text, which is nice. */
  padding: 0.5em;

  /* Limit the size of the card. */
  max-width: calc(min(100vw - 6em, 60em));
  max-height: calc(100dvh - 6em);
  margin: 3em;
  padding: 2em;

  /* Scroll if needed, otherwise, no scroll bar. */
  overflow-y: auto;

  /* Set background. */
  background: aliceblue;

  /* Allow positioning elements within the popup. */
  position: relative;

  /* Popups gets a fixed size so the font dialog doesn't jump around. */
  font-size: 2vh;
}

.popup * {
  font-size: inherit;
}

.popup p,
.popup div.p {
  /* Keep the paragraph margins the same on all sides. */
  margin: 2vh;
}

.popup p.title {
  font-size: 4vh;
  font-weight: bold;
}

/* This should stay in the corner as the popup scrolls. */
.popup-close.floating-button {
  float: right;
  top: 1em;
  right: 1em;
  position: sticky;
}

#help-button,
#settings-button,
#transcript-button {
  position: fixed;
  right: 2em;
}

/* For mobile devices, move the floating buttons over a little more. */
body[data-mobile="true"] #help-button,
body[data-mobile="true"] #settings-button,
body[data-mobile="true"] #transcript-button {
  right: 1em;
}

#help-button {
  top: 1em;
}

#settings-button {
  top: 5em;
}

#transcript-button {
  top: 9em;
}

#how-do-i-play-card p, #how-do-i-play-card li {
  /* Space out the help to make it easier to read. */
  word-spacing: 0.15em;
  line-height: 1.5;
}
#how-do-i-play-card li {
  margin-left: 1em;
}

#how-do-i-play-card li.top {
  margin-top: 1em;
}

#how-do-i-play-card tt {
  background: seashell;
  border: 1px inset lightgray;
  padding: 0 0.3em;
}

#map-card {
  /* The map should occupy all the space available.
   * Since the map is taller than wide, only pin the height. */
  height: 100%;
  overflow: hidden;
}
#map-card img {
  height: 100%;
}

#settings-card label,
#lineinput label {
  /* Override the haven default for labels */
  background: none;
  color: inherit;
}

/* NOTE: don't add div here, or else desktop-bundle-only breaks */
#settings-card label,
#settings-card input {
  display: block;
}

#settings-card div,
#settings-card label,
#settings-card input {
  /* Space these apart a bit */
  margin: 1em;
}

.toggle {
  /* Hide the actual toggle, but give it space. */
  appearance: none;
  position: relative;
  display: inline-block;
  box-sizing: content-box;
  width: 4.5em;
  height: 2em;
  padding: 0.2em;
  border: none;
  border-radius: 1.5em;
  overflow: hidden;

  /* Make it clickable still. */
  cursor: pointer;

  /* Background when off. */
  background: dimgray;

  /* Animate! */
  transition: background ease 0.3s;
}

.toggle:checked {
  /* Background when on. */
  background: forestgreen;
}

.toggle[disabled] {
  cursor: not-allowed;
}

.toggle[disabled]:checked {
  background: dimgray;
}

.toggle::before {
  /* A label, "on" or "off". */
  content: "on off";
  display: block;
  position: absolute;
  width: 2em;
  height: 2em;
  line-height: 2em;
  font-weight: bold;
  text-transform: uppercase;

  /* Space it so that only one label shows at a time. */
  text-indent: -2em;
  word-spacing: 2.55em;
  white-space: nowrap;

  /* The color and shape of the ball. */
  background: #fff;
  border-radius: 50%;

  /* The color of the label. */
  color: #fff;

  /* Make the text pop a bit. */
  text-shadow: -1px -1px rgba(0,0,0,0.15);

  /* Animate! */
  transition: transform cubic-bezier(0.3, 1.5, 0.7, 1) 0.3s;
}

.toggle:checked::before {
  /* Move everything over. */
  transform: translateX(2.5em);
}

#license-card {
  /* This is a good size for reading the licenses.  And with a specific width,
   * the width doesn't change when the details sections are expanded. */
  width: 50em;
}

#license-card details {
  margin: 2em 0.5em;
}

#transcriptComments {
  /* The textarea can be resized, but these will constrain that. */
  min-width: 100%;
  max-width: 100%;
  min-height: 4em;
}

#delete-button {
  display: none;
  position: absolute;
  left: -3rem;
  height: 100%;

  font-weight: normal;
  border-radius: 25%;
  border: none;

  color: black;
  background: #eee;
}
body[data-mobile="true"] #delete-button {
  display: block;
}

/* In-game achievement popups, abusing toastr.info */
#toast-container {
  /* Otherwise, this overlaps the scroll bar. */
  right: 1em;
}

#toast-container > .toast-info {
  font-size: 3vh;

  background-color: dimgray;
  color: white;
  opacity: 1;

  /* The base toastr uses !important, so we have to, too */
  background-image: none !important;

  min-height: 7em;
  min-width: 25em;
  padding: 0.5em;
  /* Leave room for the 6em image with 0.5em padding around it on both sides. */
  padding-left: 7em;
}

#toast-container > .toast-info:before {
  content: " ";
  display: block;

  position: absolute;
  top: 0.5em;
  left: 0.5em;

  width: 6em;
  height: 6em;
  background-size: 6em;
  background-repeat: no-repeat;
  background-image: var(--achievement-icon);
}

#toast-container > .toast-info > .toast-title,
#toast-container > .toast-info > .toast-message {
  white-space: pre-wrap;
}

#toast-container > .toast-info > .toast-title {
  margin-bottom: 1em;
}

#toast-container > .toast-info > .toast-message {
  font-size: 2vh;
}


/* In-game achievement display */
#achievement-container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
}

.achievement {
  display: inline-block;
  font-size: 1.5em;
  width: 10em;
  margin: 0.5em;
  vertical-align: top;
}

.achievement img {
  width: 10em;
}

.achievement .title {
  font-weight: bold;
  margin-bottom: 0.5em;
}

.achievement .progress {
  font-style: italic;
}


/* Infocom mode */
body[data-infocom="true"] #vorple {
  background: black;
  color: white;
  font-family: var(--default-font-mono);
}
body[data-infocom="true"] .lineinput,
body[data-infocom="true"] #lineinput,
body[data-infocom="true"] #lineinput-prefix,
body[data-infocom="true"] #lineinput-field,
body[data-infocom="true"] #auto-complete select,
body[data-infocom="true"] #delete-button {
  color: white;
  background: #222;
  font-family: var(--default-font-mono);
}
body[data-infocom="true"] .popup-container {
  background: radial-gradient(white, transparent);
}
body[data-infocom="true"] .continue,
body[data-infocom="true"] .ending-card {
  background: #114;
}
body[data-infocom="true"] .room-heading,
body[data-infocom="true"] :not(.room-heading) > .room-name,
body[data-infocom="true"] .direction-name,
body[data-infocom="true"] .hint {
  background: #304;
}
body[data-infocom="true"][data-difficulty="easy"] .interesting-highlight {
  background: #030;
}
body[data-infocom="true"] #toast-container > .toast-info {
  background-color: white;
  color: black;
}
